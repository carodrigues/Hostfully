{
	"info": {
		"_postman_id": "7abbc6a4-1b89-4c0a-a8c9-6c326d935b46",
		"name": "Hostfully",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4845133"
	},
	"item": [
		{
			"name": "Properties resource",
			"item": [
				{
					"name": "GET Endpoints - before properties creation",
					"item": [
						{
							"name": "1 - GET properties - HTTP code 401 -  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"full authentication is required to access this resource\", function () {\r",
											"   var response = pm.response.json();\r",
											"   var message = response.exception;\r",
											"   console.log(message);\r",
											"   pm.expect(message).to.contain('Full authentication is required to access this resource').and.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random_id = \"c773aa2c-94bf-4018-9191-2b642990599f\"\r",
											"pm.environment.set(\"id\", random_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties/{{id}}",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1 - GET properties by Id - HTTP code 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random_id = \"c773aa2c-94bf-4018-9191-2b642990599f\"\r",
											"pm.environment.set(\"id\", random_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties/{{id}}",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - GET all properties - HTTP code 401 -  Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"full authentication is required to access this resource\", function () {\r",
											"   var response = pm.response.json();\r",
											"   var message = response.exception;\r",
											"   console.log(message);\r",
											"   pm.expect(message).to.contain('Full authentication is required to access this resource').and.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - GET all properties - HTTP CODE 200 - must return an empty array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"Empty response\", function () {\r",
											"   pm.expect(response_id).to.be.empty;   \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Properties creation",
					"item": [
						{
							"name": "3 - POST properties - HTTP code 201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"  pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"ID is not equal to the provided ID and is a valid guid\", function () {\r",
											"  var provided_id = pm.environment.get(\"id\");\r",
											"  var response_id = response.id;\r",
											"  pm.expect(response.id).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);\r",
											"  pm.expect(response_id).to.not.eql(provided_id);\r",
											"  pm.environment.set(\"property_id_for_get\", response_id);   \r",
											"});\r",
											"\r",
											"pm.test(\"alias is equal to the provied alias\", function () {    \r",
											"  var provided_alias = pm.environment.get(\"alias\");\r",
											"  var response_alias = response.alias;\r",
											"  pm.expect(response.alias).to.eql(provided_alias);\r",
											"});\r",
											"\r",
											"pm.test(\"countryCode is equal to the provied countryCode\", function () {\r",
											"  var provided_countryCode = pm.environment.get(\"countryCode\");\r",
											"  var response_countryCode = response.countryCode;\r",
											"  pm.expect(response_countryCode).to.eql(provided_countryCode);\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is valid and equal to the provided createdAt\", function () {\r",
											"  var provided_createdAt = pm.environment.get(\"createdAt\");\r",
											"  var response_createdAt = response.createdAt;      \r",
											"  var validdatetime = Date.parse(response_createdAt); // Check if datetime is a valid date\r",
											"  pm.expect(validdatetime).to.not.be.NaN;  \r",
											"  pm.expect(response_createdAt).to.be.below(provided_createdAt);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for America4\"\r",
											"var countryCode = \"US2\"\r",
											"var createdAt  = new Date().toISOString();\r",
											"console.log(createdAt)\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);\r",
											"\r",
											"pm.environment.set(\"property_alias_for_get\", alias);\r",
											"pm.environment.set(\"property_countryCode_for_get\", countryCode);\r",
											"pm.environment.set(\"property_createdAt_for_get\", createdAt);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"alias\": \"{{alias}}\",\r\n  \"countryCode\": \"{{countryCode}}\",\r\n  \"createdAt\": \"{{createdAt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "4 - POST properties -  HTTP code 201 - set future date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"ID is not equal to the provided ID and is a valid guid\", function () {\r",
											"\r",
											"  var provided_id = pm.environment.get(\"id\");\r",
											"  var response_id = response.id;\r",
											"  pm.expect(response.id).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);\r",
											"   pm.expect(response_id).to.not.eql(provided_id);   \r",
											"});\r",
											"\r",
											"pm.test(\"alias is equal to the provied alias\", function () {\r",
											"    \r",
											"  var provided_alias = pm.environment.get(\"alias\");\r",
											"  var response_alias = response.alias;\r",
											"  pm.expect(response.alias).to.eql(provided_alias);\r",
											" \r",
											"});\r",
											"\r",
											"pm.test(\"countryCode is equal to the provied countryCode\", function () {\r",
											"\r",
											"  var provided_countryCode = pm.environment.get(\"countryCode\");\r",
											"  var response_countryCode = response.countryCode;\r",
											"  pm.expect(response_countryCode).to.eql(provided_countryCode);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is anterior to the provided createdAt\", function () {\r",
											"    var provided_createdAt = pm.environment.get(\"createdAt\");\r",
											"    var response_createdAt = response.createdAt;      \r",
											"    var validdatetime = Date.parse(response_createdAt); // Check if datetime is a valid date\r",
											"    pm.expect(validdatetime).to.not.be.NaN;  \r",
											"    pm.expect(response_createdAt).to.be.below(provided_createdAt);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55307\"\r",
											"var alias = \"Property for Argentina\"\r",
											"var countryCode = \"AR\"\r",
											"var currentLocalTime  = new Date();\r",
											"currentLocalTime .setHours(currentLocalTime.getHours() + 1);\r",
											"var createdAt = currentLocalTime.toISOString();\r",
											"console.log(createdAt)\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"alias\": \"{{alias}}\",\r\n  \"countryCode\": \"{{countryCode}}\",\r\n  \"createdAt\": \"{{createdAt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "5 - POST properties  - HTTP code 201 - array of countryCodes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"ID is not equal to the provided ID and is a valid guid\", function () {\r",
											"\r",
											"  var provided_id = pm.environment.get(\"id\");\r",
											"  var response_id = response.id;\r",
											"  pm.expect(response.id).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/); // response id must be a guid\r",
											"   pm.expect(response_id).to.not.eql(provided_id); \r",
											"    pm.environment.set(\"property_id\", response_id);\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"alias is equal to the provied alias\", function () {\r",
											"    \r",
											"  var provided_alias = pm.environment.get(\"alias\");\r",
											"  var response_alias = response.alias;\r",
											"  pm.expect(response.alias).to.eql(provided_alias); \r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"countryCode is equal to the provied countryCode\", function () {\r",
											"\r",
											"  var provided_countryCode = pm.environment.get(\"countryCode\");\r",
											"  var response_countryCode = response.countryCode;\r",
											"  pm.expect(response_countryCode).to.eql(provided_countryCode);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is valid and equal to the provided createdAt\", function () {\r",
											"    var provided_createdAt = pm.environment.get(\"createdAt\");\r",
											"    var response_createdAt = response.createdAt;      \r",
											"    var validdatetime = Date.parse(response_createdAt); // Check if datetime is a valid date\r",
											"    pm.expect(validdatetime).to.not.be.NaN;  \r",
											"    pm.expect(response_createdAt).to.eql(provided_createdAt);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for france, Italy, Poland and United kingdom\"\r",
											"var countryCode = [ \"FR\", \"IT\", \"PL\", \"UK\" ]\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"alias\": \"{{alias}}\",\r\n  \"countryCode\": \"{{countryCode}}\",\r\n  \"createdAt\": \"{{createdAt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "6 - POST properties -  HTTP code 201 - object only with alias property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"ID is not equal to the provided ID and is a valid guid\", function () {\r",
											"\r",
											"  var provided_id = pm.environment.get(\"id\");\r",
											"  var response_id = response.id;\r",
											"  pm.expect(response.id).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);\r",
											"   pm.expect(response_id).to.not.eql(provided_id);\r",
											"\r",
											"    pm.environment.set(\"property_id\", response_id);\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"alias is equal to the provied alias\", function () {\r",
											"    \r",
											"  var provided_alias = pm.environment.get(\"alias\");\r",
											"  var response_alias = response.alias;\r",
											"  pm.expect(response.alias).to.eql(provided_alias);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"countryCode is equal to the provied countryCode\", function () {\r",
											"  var response_countryCode = response.countryCode;\r",
											"  pm.expect(response_countryCode).to.be.null\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is valid and equal to the provided createdAt\", function () {\r",
											"    var provided_createdAt = pm.environment.get(\"createdAt\");\r",
											"    var response_createdAt = response.createdAt;      \r",
											"    var validdatetime = Date.parse(response_createdAt); // Check if datetime is a valid date\r",
											"    pm.expect(validdatetime).to.not.be.NaN;  \r",
											"    pm.expect(response_createdAt).to.eql(provided_createdAt);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var alias = \"Property for China\"\r",
											"\r",
											"pm.environment.set(\"alias\", alias);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"alias\": \"{{alias}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "7 - POST properties   -  HTTP code 400 - duplicate property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"property already exists\", function () {\r",
											"   var response = pm.response.json();\r",
											"   var alias =   pm.environment.get(\"alias\");\r",
											"   var message = response.error;\r",
											"   var expected_message = alias + \" already exists\"\r",
											"   pm.expect(message).to.contain(expected_message).and.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for Thailand\"\r",
											"var countryCode = \"TH\"\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n \"alias\": \"Modern Apartment Downtown\",\r\n  \"countryCode\": \"US\",\r\n  \"createdAt\": \"2025-01-21T14:30:00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "8 - POST properties - HTTP code 400 - long alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55309\"\r",
											"var alias = \"Property for america777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\"\r",
											"var countryCode = \"UA\"\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"alias\": \"{{alias}}\",\r\n  \"countryCode\": \"{{countryCode}}\",\r\n  \"createdAt\": \"{{createdAt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "9 - POST properties - HTTP code 400 - invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for France\"\r",
											"var countryCode = \"FR\"\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"3fa85f64-5717-4562\",\r\n \"alias\": \"Property for portugal\",\r\n  \"countryCode\": \"PT\",\r\n  \"createdAt\": \"2025-01-21T14:30:00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "10 - POST properties -  HTTP code 400 - invalid createdAt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for Romenia\"\r",
											"var countryCode = \"RE\"\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"ea27f999-e51c-421a-bca8-0ec386b7e193\",\r\n \"alias\": \"Property for Spain\",\r\n  \"countryCode\": \"ES\",\r\n  \"createdAt\": \"2025-01-\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "11 - POST properties -  HTTP code 400 - alias is required",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"Property alias is required\", function () {\r",
											"\r",
											"var response_errors_defaultMessage = response.errors[0].defaultMessage;\r",
											"  pm.expect(response_errors_defaultMessage).to.be.eql('Property alias is required');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for Japan\"\r",
											"var countryCode = \"JP\"\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"cdd7f8b8-2013-4357-93b9-5e340abf83a1\",\r\n  \"countryCode\": \"PT\",\r\n  \"createdAt\": \"2025-01-21T14:30:00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "12 - POST properties - HTTP code 400 - alias can´t be empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"alias can´t be empty\", function () {\r",
											"\r",
											"    var response_errors_defaultMessage = response.errors[0].defaultMessage;\r",
											"\r",
											"    pm.expect(response_errors_defaultMessage).to.be.eql('Property alias must have value');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for Australia\"\r",
											"var countryCode = \"AU\"\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n \"alias\": \" \"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "13 - POST properties   -  HTTP code 401 - no authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"full authentication is required to access this resource\", function () {\r",
											"   var response = pm.response.json();\r",
											"   var message = response.exception;\r",
											"   console.log(message);\r",
											"   pm.expect(message).to.contain('Full authentication is required to access this resource').and.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var id = \"a2478f68-3746-4438-96d8-c2eec0e55305\"\r",
											"var alias = \"Property for america\"\r",
											"var countryCode = \"US\"\r",
											"var createdAt = new Date().toISOString();\r",
											"\r",
											"pm.environment.set(\"id\", id);\r",
											"pm.environment.set(\"alias\", alias);\r",
											"pm.environment.set(\"createdAt\", createdAt);\r",
											"pm.environment.set(\"countryCode\", countryCode);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"alias\": \"{{alias}}\",\r\n  \"countryCode\": \"{{countryCode}}\",\r\n  \"createdAt\": \"{{createdAt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET Endpoints - after properties creation",
					"item": [
						{
							"name": "14 - GET Property by id - HTTP code 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var response = pm.response.json();\r",
											"\r",
											"pm.test(\"ID is not equal to the provided ID and is a valid guid\", function () {\r",
											"\r",
											"  var expected_property_id = pm.environment.get(\"property_id_for_get\");\r",
											"  var response_id = response.id;\r",
											"  pm.expect(response.id).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);\r",
											"   pm.expect(response_id).to.eql(expected_property_id);\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"alias is equal to the provied alias\", function () {\r",
											"    \r",
											"  var expected_alias = pm.environment.get(\"property_alias_for_get\");\r",
											"  var response_alias = response.alias;\r",
											"  pm.expect(response.alias).to.eql(expected_alias);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"countryCode is equal to the provied countryCode\", function () {\r",
											"\r",
											"  var expected_countryCode = pm.environment.get(\"property_countryCode_for_get\");\r",
											"  var response_countryCode = response.countryCode;\r",
											"  pm.expect(response_countryCode).to.eql(expected_countryCode);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is valid and equal to the provided createdAt\", function () {\r",
											"    var expected_createdAt = pm.environment.get(\"property_createdAt_for_get\");\r",
											"    var response_createdAt = response.createdAt;      \r",
											"    var validdatetime = Date.parse(response_createdAt); // Check if datetime is a valid date\r",
											"    pm.expect(validdatetime).to.not.be.NaN;  \r",
											"    pm.expect(response_createdAt).to.eql(expected_createdAt);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// depends of test 3 - POST properties - must succeed - HTTP code 201"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties/{{property_id_for_get}}",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties",
										"{{property_id_for_get}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "15 - GET all properties - HTTP code 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();\r",
											"var expected_property_id = pm.environment.get(\"property_id_for_get\");\r",
											"const found_property = response.find(prop => prop.id === expected_property_id);\r",
											"\r",
											"\r",
											"pm.test(\"ID is not equal to the provided ID and is a valid guid\", function () {\r",
											"  var response_id = found_property.id;\r",
											"  console.log(response_id)\r",
											"  pm.expect(response_id).to.eql(expected_property_id);   \r",
											"});\r",
											"\r",
											"pm.test(\"alias is equal to the provied alias\", function () {    \r",
											"  var expected_alias = pm.environment.get(\"property_alias_for_get\");\r",
											"  pm.expect(found_property.alias).to.eql(expected_alias);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"countryCode is equal to the provied countryCode\", function () {\r",
											"\r",
											"  var expected_countryCode = pm.environment.get(\"property_countryCode_for_get\");\r",
											"  pm.expect(found_property.countryCode).to.eql(expected_countryCode);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"createdAt is valid and equal to the provided createdAt\", function () {\r",
											"    var expected_createdAt = pm.environment.get(\"property_createdAt_for_get\");\r",
											"    var response_createdAt = found_property.createdAt;      \r",
											"    var validdatetime = Date.parse(response_createdAt); // Check if datetime is a valid date\r",
											"    pm.expect(validdatetime).to.not.be.NaN;  \r",
											"    pm.expect(response_createdAt).to.eql(expected_createdAt);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{auth_username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{auth_password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://qa-assessment.svc.hostfully.com/properties",
									"protocol": "https",
									"host": [
										"qa-assessment",
										"svc",
										"hostfully",
										"com"
									],
									"path": [
										"properties"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Bookings resource",
			"item": [
				{
					"name": "16 - GET bookings - must fail - HTTP code 401 - no authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"full authentication is required to access this resource\", function () {\r",
									"   var response = pm.response.json();\r",
									"   var message = response.exception;\r",
									"   console.log(message);\r",
									"   pm.expect(message).to.contain('Full authentication is required to access this resource').and.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Create booking for user John Doe\r",
									"\r",
									"var user = \"John Doe\"\r",
									"\r",
									"var splitName = user.split(\" \");\r",
									"var guest_firstName = splitName[0]; \r",
									"var guest_lastName = splitName[1];  \r",
									"\r",
									"var startDate = \"2025-03-03\";\r",
									"var endDate = \"2025-03-03\";\r",
									"\r",
									"\r",
									"var status = \"SCHEDULED\";\r",
									"var guest_dateOfBirth = \"1985-07-15\";\r",
									"var booking_propertyId = pm.environment.get(\"property_id_for_get\");\r",
									"\r",
									"pm.environment.set(\"booking_startDate\", startDate);\r",
									"pm.environment.set(\"booking_endDate\", endDate);\r",
									"pm.environment.set(\"booking_status\", status);\r",
									"pm.environment.set(\"booking_guest_firstName\", guest_firstName);\r",
									"pm.environment.set(\"booking_guest_lastName\", guest_lastName);\r",
									"pm.environment.set(\"booking_guest_dateOfBirth\", guest_dateOfBirth);\r",
									"pm.environment.set(\"booking_propertyId\", booking_propertyId);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://qa-assessment.svc.hostfully.com/bookings",
							"protocol": "https",
							"host": [
								"qa-assessment",
								"svc",
								"hostfully",
								"com"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "16 - GET bookings - overlap validation - post booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"var filteredReservations = response.filter(reservation => \r",
									"    reservation.guest.firstName === \"John\" && reservation.guest.lastName === \"Doe\"\r",
									");\r",
									"\r",
									"//console.log(filteredReservations);\r",
									"\r",
									"var booking_startDate = pm.environment.get(\"booking_startDate\");\r",
									"var booking_endDate = pm.environment.get(\"booking_endDate\");\r",
									"\r",
									"if (isValidDateFormat(booking_startDate)) {\r",
									"    console.log(booking_startDate + \" is in the correct format.\");\r",
									"} else {\r",
									"    console.log(booking_startDate + \"is not in the correct format.\"); \r",
									"    console.log(\"Correct date \" + booking_startDate + \" to be yyyy-mm-dd\");\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"if (isValidDateFormat(booking_endDate)) {\r",
									"    console.log(booking_endDate + \" is in the correct format.\");\r",
									"} else {\r",
									"    console.log(booking_endDate + \" is not in the correct format.\");\r",
									"    console.log(\"Correct date \" + booking_endDate  + \" to be yyyy-mm-dd\");\r",
									"     return;\r",
									"}\r",
									"\r",
									"const overlap = isOverlapping(booking_startDate,booking_endDate, filteredReservations);\r",
									"\r",
									"if (overlap) {\r",
									"    console.log(\"New booking overlaps with an existing booking!\");\r",
									"    return;\r",
									"} else {\r",
									"    console.log(\"New booking is valid!\");\r",
									"}\r",
									"\r",
									"var booking_status = pm.environment.get(\"booking_status\");\r",
									"var booking_guest_firstName = pm.environment.get(\"booking_guest_firstName\");\r",
									"var booking_guest_lastName = pm.environment.get(\"booking_guest_lastName\");\r",
									"var booking_guest_dateOfBirth = pm.environment.get(\"booking_guest_dateOfBirth\");\r",
									"var booking_propertyId = pm.environment.get(\"booking_propertyId\");\r",
									"\r",
									"\r",
									"const postUrl = 'https://qa-assessment.svc.hostfully.com/bookings';\r",
									"const body = {\r",
									"  \"startDate\": booking_startDate,\r",
									"  \"endDate\": booking_endDate,\r",
									"  \"status\": booking_status,\r",
									"  \"guest\": {\r",
									"    \"firstName\": booking_guest_firstName,\r",
									"    \"lastName\": booking_guest_lastName,\r",
									"    \"dateOfBirth\": booking_guest_dateOfBirth\r",
									"  },\r",
									"  \"propertyId\": booking_propertyId\r",
									"};\r",
									"\r",
									"console.log(body)\r",
									"\r",
									"var username = pm.environment.get(\"auth_username\");\r",
									"var password = pm.environment.get(\"auth_password\");\r",
									"\r",
									"var auth = btoa(username + ':' + password);  // btoa encodes to base64\r",
									"\r",
									"pm.environment.set(\"auth\", auth);\r",
									"const headers = {\r",
									"    'Content-Type': 'application/json',\r",
									"    'Authorization': 'Basic ' + auth \r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: postUrl,\r",
									"    method: 'POST',\r",
									"    header: headers,\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(body)  \r",
									"    }\r",
									"}, function (err, res) {\r",
									"    \r",
									"    if (err) {\r",
									"        console.log('Error calling the POST request:', err);\r",
									"    } else {\r",
									"        console.log('POST Request Response:', res);\r",
									"        pm.test('POST request was successful', function () {\r",
									"            pm.expect(res.status).to.eql(201);  \r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"function isOverlapping(booking_startDate,booking_endDate, filteredReservations) {\r",
									" \r",
									"    for (const booking of filteredReservations) {\r",
									"  \r",
									"       var existingStart = convertToDate(booking.startDate);\r",
									"       var existingEnd = convertToDate(booking.endDate);\r",
									"        //console.log(\"existingStart \" + existingStart)\r",
									"       // console.log(\"existingEnd \" + existingEnd)\r",
									"\r",
									"        // console.log(\"booking_startDate \" + booking_startDate)\r",
									"        //console.log(\"booking_endDate \" + booking_endDate)\r",
									"        \r",
									"        if (booking_startDate <= existingEnd && booking_endDate >= existingStart) {\r",
									"            console.log(booking.id)\r",
									"            return true; // Overlapping booking found\r",
									"        }\r",
									"    }\r",
									"    return false; // No overlap\r",
									"}\r",
									"\r",
									"function convertToDate(arraydate){\r",
									"\r",
									"    var year = arraydate[0];\r",
									"    var month = String(arraydate[1]).padStart(2, '0'); \r",
									"    var day = String(arraydate[2]).padStart(2, '0'); \r",
									"\r",
									"    var date = `${year}-${month}-${day}`;\r",
									"\r",
									"    return date; \r",
									"}\r",
									"\r",
									"function isValidDateFormat(date) {\r",
									"    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;    \r",
									"    return regex.test(date);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Create booking for user John Doe\r",
									"\r",
									"var user = \"John Doe\"\r",
									"\r",
									"var splitName = user.split(\" \");\r",
									"var guest_firstName = splitName[0]; \r",
									"var guest_lastName = splitName[1];  \r",
									"\r",
									"var startDate = \"2025-03-03\";\r",
									"var endDate = \"2025-03-03\";\r",
									"\r",
									"\r",
									"var status = \"SCHEDULED\";\r",
									"var guest_dateOfBirth = \"1985-07-15\";\r",
									"var booking_propertyId = pm.environment.get(\"property_id_for_get\");\r",
									"\r",
									"pm.environment.set(\"booking_startDate\", startDate);\r",
									"pm.environment.set(\"booking_endDate\", endDate);\r",
									"pm.environment.set(\"booking_status\", status);\r",
									"pm.environment.set(\"booking_guest_firstName\", guest_firstName);\r",
									"pm.environment.set(\"booking_guest_lastName\", guest_lastName);\r",
									"pm.environment.set(\"booking_guest_dateOfBirth\", guest_dateOfBirth);\r",
									"pm.environment.set(\"booking_propertyId\", booking_propertyId);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{auth_username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{auth_password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://qa-assessment.svc.hostfully.com/bookings",
							"protocol": "https",
							"host": [
								"qa-assessment",
								"svc",
								"hostfully",
								"com"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST bookings test1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var startDate = \"2025-01-17\";\r",
									"var endDate = \"2025-01-17\";\r",
									"var status = \"SCHEDULED\";\r",
									"var guest_firstName = \"John\";\r",
									"var guest_lastName = \"Doe\";\r",
									"var guest_dateOfBirth = \"1985-07-15\";\r",
									"var booking_propertyId = pm.environment.get(\"property_id_for_get\");\r",
									"\r",
									"pm.environment.set(\"booking_startDate\", startDate);\r",
									"pm.environment.set(\"booking_endDate\", endDate);\r",
									"pm.environment.set(\"booking_status\", status);\r",
									"pm.environment.set(\"booking_guest_firstName\", guest_firstName);\r",
									"pm.environment.set(\"booking_guest_lastName\", guest_lastName);\r",
									"pm.environment.set(\"booking_guest_dateOfBirth\", guest_dateOfBirth);\r",
									"pm.environment.set(\"booking_propertyId\", booking_propertyId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"const startDate = new Date(response.startDate[0], response.startDate[1] - 1, response.startDate[2]);\r",
									"\r",
									"const endDate = new Date(response.endDate[0], response.endDate[1] - 1, response.endDate[2]);\r",
									"\r",
									"const dateOfBirth = new Date(response.guest.dateOfBirth[0], response.guest.dateOfBirth[1] - 1, response.guest.dateOfBirth[2]);\r",
									"\r",
									"\r",
									"pm.test(\"startDate is de provide startDate\", function () {\r",
									"    var provided_startDate = pm.environment.get(\"booking_startDate\");\r",
									"    pm.expect(startDate.toISOString().split('T')[0]).to.be.eql(provided_startDate)\r",
									"});\r",
									"\r",
									"pm.test(\"endDate is de provide endDate\", function () {\r",
									"    var provided_endDate = pm.environment.get(\"booking_endDate\");\r",
									"    pm.expect(endDate.toISOString().split('T')[0]).to.be.eql(provided_endDate)\r",
									"});\r",
									"\r",
									"pm.test(\"status is de provide status\", function () {\r",
									"    var provided_status = pm.environment.get(\"booking_status\");\r",
									"    pm.expect(response.status).to.be.eql(provided_status)\r",
									"});\r",
									"\r",
									"pm.test(\"guest is de provide guest\", function () {\r",
									"\r",
									"    var provided_booking_guest_firstName = pm.environment.get(\"booking_guest_firstName\");\r",
									"    var provided_booking_guest_lastName = pm.environment.get(\"booking_guest_lastName\");\r",
									"    var provided_booking_guest_dateOfBirth = pm.environment.get(\"booking_guest_dateOfBirth\");\r",
									"\r",
									"    pm.expect(response.guest.firstName).to.be.eql(provided_booking_guest_firstName)\r",
									"    pm.expect(response.guest.lastName).to.be.eql(provided_booking_guest_lastName)\r",
									"   \r",
									"   console.log(dateOfBirth)\r",
									"   console.log(dateOfBirth.toISOString().split('T')[0])\r",
									"   console.log(provided_booking_guest_dateOfBirth)\r",
									"  // fix \r",
									"    pm.expect(dateOfBirth.toISOString().split('T')[0]).to.be.eql(provided_booking_guest_dateOfBirth)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"propertyId is de provide propertyId\", function () {\r",
									"    var provided_booking_propertyId = pm.environment.get(\"booking_propertyId\");\r",
									"    pm.expect(response.propertyId ).to.be.eql(provided_booking_propertyId)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"startDate\": \"{{booking_startDate}}\",\r\n  \"endDate\": \"{{booking_endDate}}\",\r\n  \"status\": \"{{booking_status}}\",\r\n  \"guest\": {\r\n    \"firstName\": \"{{booking_guest_firstName}}\",\r\n    \"lastName\": \"{{booking_guest_lastName}}\",\r\n    \"dateOfBirth\": \"{{booking_guest_dateOfBirth}}\"\r\n  },\r\n  \"propertyId\": \"{{booking_propertyId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa-assessment.svc.hostfully.com/bookings",
							"protocol": "https",
							"host": [
								"qa-assessment",
								"svc",
								"hostfully",
								"com"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST bookings  test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var startDate = \"2025-01-17\";\r",
									"var endDate = \"2025-01-17\";\r",
									"var status = \"SCHEDULED\";\r",
									"var guest_firstName = \"John\";\r",
									"var guest_lastName = \"Doe\";\r",
									"var guest_dateOfBirth = \"1985-07-15\";\r",
									"var booking_propertyId = pm.environment.get(\"property_id_for_get\");\r",
									"\r",
									"pm.environment.set(\"booking_startDate\", startDate);\r",
									"pm.environment.set(\"booking_endDate\", endDate);\r",
									"pm.environment.set(\"booking_status\", status);\r",
									"pm.environment.set(\"booking_guest_firstName\", guest_firstName);\r",
									"pm.environment.set(\"booking_guest_lastName\", guest_lastName);\r",
									"pm.environment.set(\"booking_guest_dateOfBirth\", guest_dateOfBirth);\r",
									"pm.environment.set(\"booking_propertyId\", booking_propertyId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"const startDate = new Date(response.startDate[0], response.startDate[1] - 1, response.startDate[2]);\r",
									"\r",
									"const endDate = new Date(response.endDate[0], response.endDate[1] - 1, response.endDate[2]);\r",
									"\r",
									"const dateOfBirth = new Date(response.guest.dateOfBirth[0], response.guest.dateOfBirth[1] - 1, response.guest.dateOfBirth[2]);\r",
									"\r",
									"\r",
									"pm.test(\"startDate is de provide startDate\", function () {\r",
									"    var provided_startDate = pm.environment.get(\"booking_startDate\");\r",
									"    pm.expect(startDate.toISOString().split('T')[0]).to.be.eql(provided_startDate)\r",
									"});\r",
									"\r",
									"pm.test(\"endDate is de provide endDate\", function () {\r",
									"    var provided_endDate = pm.environment.get(\"booking_endDate\");\r",
									"    pm.expect(endDate.toISOString().split('T')[0]).to.be.eql(provided_endDate)\r",
									"});\r",
									"\r",
									"pm.test(\"status is de provide status\", function () {\r",
									"    var provided_status = pm.environment.get(\"booking_status\");\r",
									"    pm.expect(response.status).to.be.eql(provided_status)\r",
									"});\r",
									"\r",
									"pm.test(\"guest is de provide guest\", function () {\r",
									"\r",
									"    var provided_booking_guest_firstName = pm.environment.get(\"booking_guest_firstName\");\r",
									"    var provided_booking_guest_lastName = pm.environment.get(\"booking_guest_lastName\");\r",
									"    var provided_booking_guest_dateOfBirth = pm.environment.get(\"booking_guest_dateOfBirth\");\r",
									"\r",
									"    pm.expect(response.guest.firstName).to.be.eql(provided_booking_guest_firstName)\r",
									"    pm.expect(response.guest.lastName).to.be.eql(provided_booking_guest_lastName)\r",
									"   \r",
									"   console.log(dateOfBirth)\r",
									"   console.log(dateOfBirth.toISOString().split('T')[0])\r",
									"   console.log(provided_booking_guest_dateOfBirth)\r",
									"  // fix \r",
									"    pm.expect(dateOfBirth.toISOString().split('T')[0]).to.be.eql(provided_booking_guest_dateOfBirth)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"propertyId is de provide propertyId\", function () {\r",
									"    var provided_booking_propertyId = pm.environment.get(\"booking_propertyId\");\r",
									"    pm.expect(response.propertyId ).to.be.eql(provided_booking_propertyId)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"startDate\": \"{{booking_startDate}}\",\r\n  \"endDate\": \"{{booking_endDate}}\",\r\n  \"status\": \"{{booking_status}}\",\r\n  \"guest\": {\r\n    \"firstName\": \"{{booking_guest_firstName}}\",\r\n    \"lastName\": \"{{booking_guest_lastName}}\",\r\n    \"dateOfBirth\": \"{{booking_guest_dateOfBirth}}\"\r\n  },\r\n  \"propertyId\": \"{{booking_propertyId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://qa-assessment.svc.hostfully.com/bookings",
							"protocol": "https",
							"host": [
								"qa-assessment",
								"svc",
								"hostfully",
								"com"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "NaX5k1wFadtkFf",
				"type": "string"
			},
			{
				"key": "username",
				"value": "candidate@hostfully.com",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var auth_username = \"candidate@hostfully.com\";\r",
					"var auth_password =  \"NaX5k1wFadtkFf\";\r",
					"\r",
					"pm.environment.set(\"auth_username\", auth_username);\r",
					"pm.environment.set(\"auth_password\", auth_password);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}